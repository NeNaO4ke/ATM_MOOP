{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/account-list-item/account-list-item.component.ts","./src/app/components/account-list-item/account-list-item.component.html","./src/app/components/account-plan-list-item/account-plan-list-item.component.ts","./src/app/components/account-plan-list-item/account-plan-list-item.component.html","./src/app/components/atm-header/atm-header.component.ts","./src/app/components/atm-header/atm-header.component.html","./src/app/components/atm-list/atm-list.component.ts","./src/app/components/atm-list/atm-list.component.html","./src/app/components/atm-login/atm-login.component.ts","./src/app/components/atm-login/atm-login.component.html","./src/app/components/atm-main-menu/atm-main-menu.component.ts","./src/app/components/atm-main-menu/atm-main-menu.component.html","./src/app/components/atm-window/atm-window.component.ts","./src/app/components/atm-window/atm-window.component.html","./src/app/components/notification/notification.component.ts","./src/app/components/notification/notification.component.html","./src/app/components/transaction-list-item/transaction-list-item.component.ts","./src/app/components/transaction-list-item/transaction-list-item.component.html","./src/app/interceptors/httpRequest.interceptor.ts","./src/app/interfaces/app.interfaces.ts","./src/app/pages/card-info/card-info.component.ts","./src/app/pages/card-info/card-info.component.html","./src/app/pages/change-pin-code/change-pin-code.component.ts","./src/app/pages/change-pin-code/change-pin-code.component.html","./src/app/pages/deposit/deposit.component.ts","./src/app/pages/deposit/deposit.component.html","./src/app/pages/my-accounts/my-accounts.component.ts","./src/app/pages/my-accounts/my-accounts.component.html","./src/app/pages/new-account/new-account.component.ts","./src/app/pages/new-account/new-account.component.html","./src/app/pages/new-transaction/new-transaction.component.ts","./src/app/pages/new-transaction/new-transaction.component.html","./src/app/pages/select-new-account-type/select-new-account-type.component.ts","./src/app/pages/select-new-account-type/select-new-account-type.component.html","./src/app/pages/transactions-history/transactions-history.component.ts","./src/app/pages/transactions-history/transactions-history.component.html","./src/app/pages/withdraw/withdraw.component.ts","./src/app/pages/withdraw/withdraw.component.html","./src/app/services/account.service.ts","./src/app/services/atm-http.service.ts","./src/app/services/navigation.service.ts","./src/app/services/notification.service.ts","./src/app/services/utils.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { BehaviorSubject, map, mergeMap, of, switchMap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AtmInfo, SavingPlan } from './interfaces/app.interfaces';\nimport { AtmHttpService } from './services/atm-http.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'ATM';\n\n  constructor(\n  ) {}\n\n  ngOnInit(): void {\n  }\n}\n","<div style=\"display: flex\">\n\n  <app-atm-window></app-atm-window>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AtmListComponent } from './components/atm-list/atm-list.component';\nimport { AtmLoginComponent } from './components/atm-login/atm-login.component';\nimport { AtmMainMenuComponent } from './components/atm-main-menu/atm-main-menu.component';\nimport { AtmWindowComponent } from './components/atm-window/atm-window.component';\nimport { AtmHttpService } from './services/atm-http.service';\nimport { UtilsService } from './services/utils.service';\nimport { AtmHeaderComponent } from './components/atm-header/atm-header.component';\nimport { MyAccountsComponent } from './pages/my-accounts/my-accounts.component';\nimport { NavigationService } from './services/navigation.service';\nimport { AccountListItemComponent } from './components/account-list-item/account-list-item.component';\nimport { HttpRequestInterceptor } from './interceptors/httpRequest.interceptor';\nimport { SelectNewAccountTypeComponent } from './pages/select-new-account-type/select-new-account-type.component';\nimport { AccountPlanListItemComponent } from './components/account-plan-list-item/account-plan-list-item.component';\nimport { NewAccountComponent } from './pages/new-account/new-account.component';\nimport { NotificationService } from './services/notification.service';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { WithdrawComponent } from './pages/withdraw/withdraw.component';\nimport { DepositComponent } from './pages/deposit/deposit.component';\nimport { TransactionsHistoryComponent } from './pages/transactions-history/transactions-history.component';\nimport { TransactionListItemComponent } from './components/transaction-list-item/transaction-list-item.component';\nimport { CardInfoComponent } from './pages/card-info/card-info.component';\nimport { ChangePinCodeComponent } from './pages/change-pin-code/change-pin-code.component';\nimport { NewTransactionComponent } from './pages/new-transaction/new-transaction.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AtmWindowComponent,\n    AtmListComponent,\n    AtmLoginComponent,\n    AtmMainMenuComponent,\n    AtmHeaderComponent,\n    MyAccountsComponent,\n    AccountListItemComponent,\n    SelectNewAccountTypeComponent,\n    AccountPlanListItemComponent,\n    NewAccountComponent,\n    NotificationComponent,\n    WithdrawComponent,\n    DepositComponent,\n    TransactionsHistoryComponent,\n    TransactionListItemComponent,\n    CardInfoComponent,\n    ChangePinCodeComponent,\n    NewTransactionComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    AtmHttpService,\n    FormBuilder,\n    UtilsService,\n    NotificationService,\n    NavigationService,\n     // Http Interceptor(s) -  adds with Client Credentials\n    { provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Account } from 'src/app/interfaces/app.interfaces';\n\n@Component({\n  selector: 'app-account-list-item',\n  templateUrl: './account-list-item.component.html',\n  styleUrls: ['./account-list-item.component.scss']\n})\nexport class AccountListItemComponent implements OnInit {\n\n  @Input() account?: Account;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<button class=\"account-info\" *ngIf=\"account\">\n  <div>\n    <span>{{account.accountName}}</span>\n    <span>#{{account.id}}</span>\n  </div>\n  <div>\n    <span>Type:</span>\n    <span>{{account.accountType}}</span>\n  </div>\n  <div>\n    <span>Balance:</span>\n    <span>{{account.balance.amount}} {{account.balance.currency}}</span>\n  </div>\n</button>","import { Component, Input, OnInit } from '@angular/core';\nimport { AtmState, SavingPlan, TransactionalPlan } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\n\n@Component({\n  selector: 'app-account-plan-list-item',\n  templateUrl: './account-plan-list-item.component.html',\n  styleUrls: ['./account-plan-list-item.component.scss']\n})\nexport class AccountPlanListItemComponent implements OnInit {\n\n  @Input() disabled: boolean = false;\n  @Input() transactionalPlan?: TransactionalPlan;\n  @Input() savingPlan?: SavingPlan;\n  @Input() index?: number;\n\n  constructor(\n    private accountService: AccountService\n  ) { }\n\n\n  ngOnInit() {\n  }\n\n  selectPlan() {\n    if (this.savingPlan) {\n      this.accountService.newPlan$.next({plan: this.savingPlan, index: this.index!});\n      this.accountService.atmState$.next(AtmState.NEW_ACCOUNT)\n    }\n    else if (this.transactionalPlan) {\n      this.accountService.newPlan$.next({plan: this.transactionalPlan, index: this.index!});\n      this.accountService.atmState$.next(AtmState.NEW_ACCOUNT)\n    }\n  }\n\n}\n","<div class=\"account-plan\">\n  <button *ngIf=\"transactionalPlan\" (click)=\"selectPlan()\" [disabled]=\"disabled\">\n    <div>\n      <span>Credit plan:</span>\n      <span>{{transactionalPlan.planName}}</span>\n    </div>\n    <div>\n      <span>Credit limit:</span>\n      <span>{{transactionalPlan.creditMoneyAmount}}</span>\n    </div>\n    <div>\n      <span>Lending rate:</span>\n      <span>{{transactionalPlan.lendingRate}}%</span>\n    </div>\n  </button>\n  <button *ngIf=\"savingPlan\" (click)=\"selectPlan()\" [disabled]=\"disabled\">\n    <div>\n      <span>Saving plan:</span>\n      <span>{{savingPlan.planName}}</span>\n    </div>\n    <div *ngIf=\"savingPlan.interestRate\">\n      <span>Year interest rate:</span>\n      <span>{{savingPlan.interestRate}}</span>\n    </div>\n    <div *ngIf=\"savingPlan.paymentStepPeriod\">\n      <span>Payment period:</span>\n      <span>{{savingPlan.paymentStepPeriod.period}}</span>\n    </div>\n    <div>\n      <span>Addition allowed:</span>\n      <span>{{savingPlan.additionAllowed ? 'Yes' : 'No'}}</span>\n    </div>\n  </button>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { map } from 'rxjs';\nimport { AccountType, AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\n\n@Component({\n  selector: 'app-atm-header',\n  templateUrl: './atm-header.component.html',\n  styleUrls: ['./atm-header.component.scss']\n})\nexport class AtmHeaderComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private accountService: AccountService,\n    public navigationService: NavigationService\n  ) {\n    this.currentState$.pipe(\n      map(state => {\n        if (state == this.ATM_STATES.NEW_ACCOUNT) {\n          switch (this.accountService.planType$.value) {\n            case AccountType.SAVING:\n              return 'Create new saving account'\n            case AccountType.TRANSACTIONAL:\n              return 'Create new transactional account'\n            default:\n              return state;\n          }\n        }\n        return state + ' asd';\n      })\n    );\n  }\n\n  @Input() lastState?: AtmState;\n\n  currentState$ = this.accountService.atmState$;\n\n  stateName$ = this.accountService.stateName$;\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"header-btn-container\" >\n  <div fxFlex=\"33\" style=\"text-align: start;\">\n    <button *ngIf=\"lastState\" (click)=\"navigationService.goTo(lastState)\">Back</button>\n  </div>\n  <div fxFlex=\"33\" style=\"text-align: center; font-size: 16px;\">\n    {{stateName$ | async}}\n  </div>\n  <div fxFlex=\"33\" style=\"text-align: end;\">\n    <button (click)=\"navigationService.goTo(ATM_STATES.LOGIN)\">Exit</button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { AtmInfo, AtmStatus } from 'src/app/interfaces/app.interfaces';\n\n@Component({\n  selector: 'app-atm-list',\n  templateUrl: './atm-list.component.html',\n  styleUrls: ['./atm-list.component.scss']\n})\nexport class AtmListComponent implements OnInit {\n\n  @Input() atmList: AtmInfo[] =\n  [\n    {\n      \"id\" : 1,\n      \"address\" : \"Street numero uno\",\n      \"atmStatus\" : AtmStatus.IDLE,\n      \"banks\" : [ {\n        \"id\" : 1,\n        \"name\" : \"9 vbyv kozu kulakom\"\n      } ]\n    }, {\n      \"id\" : 2,\n      \"address\" : \"Street numero dos\",\n      \"atmStatus\" : AtmStatus.IDLE,\n      \"banks\" : [ {\n        \"id\" : 1,\n        \"name\" : \"9 vbyv kozu kulakom\"\n      }, {\n        \"id\" : 2,\n        \"name\" : \"Bank number2\"\n      } ]\n    }, {\n      \"id\" : 3,\n      \"address\" : \"Street numero uno\",\n      \"atmStatus\" : AtmStatus.IDLE,\n      \"banks\" : [ {\n        \"id\" : 3,\n        \"name\" : \"9 vbyv kozu kulakom\"\n      } ]\n    }\n  ];\n\n  selectedIndex = new BehaviorSubject<number | null>(null);\n\n  @Output() onAtmSelect = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  selectItem(index: number) {\n    this.selectedIndex.next(index);\n    this.onAtmSelect.emit(this.atmList[index]);\n  }\n\n}\n","<div class=\"atm-list\">\n  <ul class=\"tree-view\">\n    <li>ATM List</li>\n    <ul>\n      <li *ngFor=\"let atm of atmList; let i = index\" [ngClass]=\"{'atm-list-item': true, 'atm-list-item__selected': (selectedIndex | async) === i}\" (click)=\"selectItem(i)\">\n        {{atm.id}}: {{atm.address}}\n      </li>\n    </ul>\n  </ul>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, catchError, EMPTY } from 'rxjs';\nimport { AtmInfo } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\n\n@Component({\n  selector: 'app-atm-login',\n  templateUrl: './atm-login.component.html',\n  styleUrls: ['./atm-login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AtmLoginComponent implements OnInit {\n\n  constructor(\n    private fb: FormBuilder,\n    private atmHttpService: AtmHttpService,\n    private accountService: AccountService\n  ) {\n    this.loginForm.disable();\n   }\n\n  @Input() selectedAtm$!: BehaviorSubject<AtmInfo | null>;\n  @Output() afterLogin = new EventEmitter<void>();\n\n  loginForm = this.fb.group(\n    {\n      cardNumber: new FormControl('', [Validators.required, Validators.maxLength(16), Validators.minLength(16)]),\n      pinCode: new FormControl('', [Validators.required, Validators.maxLength(4), Validators.minLength(4), Validators.pattern(\"^\\\\d{1,4}$\")]),\n    }\n  )\n\n  httpErrors = {\n    cardNumber: '',\n    pinCode: ''\n  }\n  isVerified$ = new BehaviorSubject<boolean>(false);\n\n  ngOnInit() {\n    this.selectedAtm$.next(null);\n    this.accountService.cardNumber = null;\n    this.selectedAtm$.subscribe(atm => {\n      if (atm) {\n        this.loginForm.enable();\n        this.loginForm.reset();\n        this.accountService.cardNumber = null;\n      }\n      this.loginForm.patchValue({cardNumber: '5169162679576631', pinCode: '6969'});\n      this.isVerified$.next(false);\n    });\n\n    this.loginForm.get('cardNumber')?.valueChanges.subscribe(val => {\n      this.loginForm.get('cardNumber')?.setValue(val?.replace(/\\s/g, '') ?? '', {emitEvent: false});\n    })\n  }\n\n  submitAction() {\n    // this.loginForm.markAllAsTouched();\n\n    if (this.loginForm.get('cardNumber')?.invalid ||\n      (this.loginForm.get('pinCode')?.invalid && this.isVerified$.value) ||\n      !this.selectedAtm$.value?.id) {\n        this.loginForm.markAllAsTouched();\n        return;\n    }\n\n    if (!this.isVerified$.value && this.selectedAtm$.value?.id) {\n      this.loginForm.get('cardNumber')?.markAllAsTouched();\n      this.atmHttpService.verifyAtm(this.loginForm.get('cardNumber')?.value!, this.selectedAtm$.value.id)\n      .pipe(\n        catchError(err => {\n          this.loginForm.get('cardNumber')?.setErrors({httpError: true});\n          this.httpErrors.cardNumber = err.error?.message ?? '';\n          this.accountService.cardNumber = null;\n          this.isVerified$.next(false);\n          return EMPTY;\n        })\n      )\n      .subscribe(\n        {\n          next: () => {\n            this.loginForm.get('cardNumber')?.disable();\n            this.accountService.cardNumber = this.loginForm.get('cardNumber')?.value ?? null;\n            this.isVerified$.next(true);\n          },\n        }\n      )\n      return;\n    }\n    this.loginForm.markAllAsTouched();\n\n    this.atmHttpService.loginToAtm(\n      this.loginForm.get('cardNumber')!.value!,\n      this.loginForm.get('pinCode')!.value!,\n      this.selectedAtm$.value.id\n    )\n    .pipe(\n      catchError(err => {\n        this.loginForm.get('pinCode')?.setErrors({httpError: true}, {emitEvent: false});\n        this.httpErrors.pinCode = err.error?.message ?? '';\n        this.isVerified$.next(true);\n        return EMPTY;\n      })\n    )\n    .subscribe(\n      {\n        next: () => {\n          this.afterLogin.emit();\n        },\n        error: err => {\n          this.loginForm.get('pinCode')?.setErrors({httpError: true}, {emitEvent: true});\n          this.httpErrors.pinCode = err.error?.message ?? '';\n          this.isVerified$.next(true);\n        }\n      }\n    )\n  }\n\n}\n","<div class=\"atm-login\" [formGroup]=\"loginForm\">\n    <div class=\"field-row\">\n      <label for=\"cardNumber\"><u>C</u>ard number:</label>\n      <input fxFlex=\"60\" id=\"cardNumber\" formControlName=\"cardNumber\"  [autocomplete]=\"false\" type=\"text\"/>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"loginForm.get('cardNumber')?.invalid && loginForm.get('cardNumber')?.touched\">\n        <span *ngIf=\"loginForm.get('cardNumber').errors?.['minlength'] || loginForm.get('cardNumber').errors?.['maxlength']\">\n          Card number lenght must be 16 characters.\n        </span>\n        <span *ngIf=\"loginForm.get('cardNumber').errors?.['required']\">\n          Required.\n        </span>\n        <span *ngIf=\"loginForm.get('cardNumber').errors?.['httpError']\">\n          {{httpErrors.cardNumber}}\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\" *ngIf=\"isVerified$ | async\">\n      <label for=\"pinCode\"><u>P</u>in Code:</label>\n      <input fxFlex=\"60\" id=\"pinCode\" formControlName=\"pinCode\" type=\"password\"/>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"loginForm.get('pinCode')?.invalid && loginForm.get('pinCode')?.touched\">\n        <span *ngIf=\"loginForm.get('pinCode').errors?.['minlength'] || loginForm.get('pinCode').errors?.['maxlength']\">\n          Pin code lenght must be 4 characters.\n        </span>\n        <span *ngIf=\"loginForm.get('pinCode').errors?.['required']\">\n          Required.\n        </span>\n        <span *ngIf=\"loginForm.get('pinCode').errors?.['pattern']\">\n          Invalid pin code. Should be 4 digits.\n        </span>\n        <span *ngIf=\"loginForm.get('pinCode').errors?.['httpError']\">\n          {{httpErrors.pinCode}}\n        </span>\n      </div>\n    </div>\n    <button type=\"submit\" [disabled]=\"!(selectedAtm$ | async)\" (click)=\"submitAction()\" style=\"margin-top: 10px; width: 50px;\">{{(isVerified$ | async) ? 'Login' : 'Verify'}}</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\n\n@Component({\n  selector: 'app-atm-main-menu',\n  templateUrl: './atm-main-menu.component.html',\n  styleUrls: ['./atm-main-menu.component.scss']\n})\nexport class AtmMainMenuComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private accountService: AccountService,\n    public navigationService: NavigationService\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"atm-main-menu\">\n  \n  <app-atm-header></app-atm-header>\n\n  <div class=\"button-list\" >\n    <button (click)=\"navigationService.goTo(ATM_STATES.MY_ACCOUNTS)\">My Accounts</button>\n    <button (click)=\"navigationService.goTo(ATM_STATES.NEW_TRANSACTION)\">New Transaction</button>\n    <button (click)=\"navigationService.goTo(ATM_STATES.WITHDRAW)\">Withdraw</button>\n    <button (click)=\"navigationService.goTo(ATM_STATES.DEPOSIT)\">Deposit</button>\n    <button (click)=\"navigationService.goTo(ATM_STATES.TRANSACTION_HISTORY)\">Transactions History</button>\n    <button (click)=\"navigationService.goTo(ATM_STATES.CARD_INFO)\">Card Info</button>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { AtmInfo, AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-atm-window',\n  templateUrl: './atm-window.component.html',\n  styleUrls: ['./atm-window.component.scss']\n})\nexport class AtmWindowComponent implements OnInit {\n\n  atmList$ = new BehaviorSubject<AtmInfo[]>([]);\n\n  selectedAtm$ = new BehaviorSubject<AtmInfo | null>(null);\n\n  atmState$ = this.accountService.atmState$;\n\n  notifications$ = this.notificationService.notification$;\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private atmHttpService: AtmHttpService,\n    private accountService: AccountService,\n    private notificationService: NotificationService\n  ) {}\n\n  ngOnInit() {\n    this.atmHttpService.getAllAtm()\n      .subscribe(atmList => {\n        this.atmList$.next(atmList);\n      })\n  }\n\n  onAtmSelect(atm: AtmInfo) {\n    this.selectedAtm$.next(atm);\n  }\n\n  afterLogin() {\n    this.atmState$.next(AtmState.MAIN_MENU);\n  }\n\n}\n","<div class=\"window\" style=\"width: 500px; height: 400px;\">\n  <div class=\"title-bar\">\n    <div class=\"title-bar-text\">ATM</div>\n    <div class=\"title-bar-controls\">\n      <button aria-label=\"Minimize\"></button>\n      <button aria-label=\"Maximize\"></button>\n      <button aria-label=\"Close\"></button>\n    </div>\n  </div>\n  <div class=\"window-body\" [ngSwitch]=\"atmState$ | async\">\n    <div *ngSwitchCase=\"ATM_STATES.LOGIN\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\" fxFlex style=\"height: 100%;\">\n      <app-atm-list (onAtmSelect)=\"onAtmSelect($event)\" fxFlex=\"45\" [atmList]=\"atmList$ | async\"></app-atm-list>\n      <app-atm-login [selectedAtm$]=\"selectedAtm$\" (afterLogin)=\"afterLogin()\" fxFlex></app-atm-login>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.MAIN_MENU\">\n      <app-atm-main-menu></app-atm-main-menu>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.MY_ACCOUNTS\">\n      <app-my-accounts></app-my-accounts>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.CHOOSE_PLAN\">\n      <app-select-new-account-type></app-select-new-account-type>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.NEW_ACCOUNT\">\n      <app-new-account></app-new-account>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.WITHDRAW\">\n      <app-withdraw></app-withdraw>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.DEPOSIT\">\n      <app-deposit></app-deposit>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.TRANSACTION_HISTORY\">\n      <app-transactions-history></app-transactions-history>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.CARD_INFO\">\n      <app-card-info></app-card-info>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.CHANGE_PIN\">\n      <app-change-pin-code></app-change-pin-code>\n    </div>\n    <div *ngSwitchCase=\"ATM_STATES.NEW_TRANSACTION\">\n      <app-new-transaction></app-new-transaction>\n    </div>\n  </div>\n  <app-notification *ngIf=\"notifications$ | async\"></app-notification>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n\n  notifications$ = this.notificationService.notification$;\n\n  constructor(\n    private notificationService: NotificationService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  closeWindow() {\n    this.notifications$.next('');\n  }\n\n}\n","<div class=\"window atm-notification\" style=\"width: 300px\">\n  <div class=\"title-bar\">\n    <div class=\"title-bar-text\">Info</div>\n    <div class=\"title-bar-controls\">\n      <button aria-label=\"Minimize\"></button>\n      <button aria-label=\"Maximize\"></button>\n      <button aria-label=\"Close\"></button>\n    </div>\n  </div>\n  <div class=\"window-body\">\n    <p>{{notifications$ | async}}</p>\n    <div>\n      <button (click)=\"closeWindow()\">OK</button>\n    </div>\n  </div>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { Transaction } from 'src/app/interfaces/app.interfaces';\n\n@Component({\n  selector: 'app-transaction-list-item',\n  templateUrl: './transaction-list-item.component.html',\n  styleUrls: ['./transaction-list-item.component.scss']\n})\nexport class TransactionListItemComponent implements OnInit {\n\n  @Input() transaction?: Transaction;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"transaction-info\" *ngIf=\"transaction\">\n  <button>\n    <div class=\"main-info\">\n      <span>Transaction #{{transaction.id}}</span>\n      <span>Created: {{transaction.startTime | date : 'short'}}</span>\n    </div>\n    <div class=\"additional-info\">\n      <span>From: {{transaction.fromAccount.id}}</span>\n      <span>Amount: {{transaction.amount?.amount}} {{transaction.amount?.currency}}</span>\n      <span>To: {{transaction.toAccount.id}}</span>\n    </div>\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\n/** Inject With Credentials into the request */\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n    constructor() {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      request = request.clone({\n        withCredentials: true\n    });\n    return next.handle(request);\n    };\n}","export interface AtmInfo {\n    id: number;\n    address: string;\n    atmStatus: AtmStatus;\n    banks: Bank[];\n}\n\nexport interface Bank {\n  id: number;\n  name: string;\n}\n\nexport interface SavingPlanPeriod {\n  period: string;\n}\n\nexport interface PlansResponse {\n  plans: {\n    saving: SavingPlan;\n    transactional: TransactionalPlan;\n  };\n}\n\nexport interface Plan {\n  planName: string;\n}\n\nexport interface SavingPlan extends Plan {\n  interestRate: number | null;\n  paymentStepPeriod: SavingPlanPeriod | null;\n  totalPeriod: SavingPlanPeriod | null;\n  initialSteps: number | null;\n  additionAllowed: boolean;\n}\n\nexport interface TransactionalPlan extends Plan {\n  creditMoneyAmount: number;\n  lendingRate: number;\n  lendingAvailable: boolean;\n}\n\nexport interface Account {\n  id: number;\n  accountType: AccountType;\n  accountStatus: AccountStatus;\n  accountName: string;\n  balance: BalanceInfo;\n  user: User;\n  card: Card;\n  creditMoneyAmount: number;\n  landingRate: number;\n  default: boolean;\n  lendingAvailable: boolean;\n}\n\nexport interface AccountInfo {\n  card: Card;\n  atm: AtmInfo;\n}\n\nexport interface BalanceInfo {\n  currency: string;\n  amount: number;\n}\n\nexport interface User {\n  id: number;\n  firstName: string;\n  middleName: string | null;\n  lastName: string | null,\n  birthdayDate: string | null,\n  userStatus: UserStatus,\n}\n\nexport interface Card {\n  number: number,\n  cardStatus: CardStatus,\n  user: User,\n  bank: Bank\n}\n\nexport type Currencies = string[];\n\nexport interface Transaction {\n  transactionStatus: TransactionStatus;\n  startTime: number;\n  amount: BalanceInfo;\n  toAccount: {id: number};\n  fromAccount: {id: number};\n  transactionType: TransactionType;\n  modifyTime: number;\n  id: number;\n}\n\nexport enum AtmStatus {\n  IDLE = 'IDLE',\n  DOWN = 'DOWN',\n  UPDATING = 'UPDATING',\n  IN_USAGE = 'IN_USAGE'\n}\n\nexport enum AccountType {\n  TRANSACTIONAL = 'TRANSACTIONAL',\n  SAVING = 'SAVING'\n}\n\nexport enum AccountStatus {\n  OK = 'OK',\n  FROZEN = 'FROZEN',\n  TERMINATED = 'TERMINATED',\n  ACCUMULATING = 'ACCUMULATING'\n}\n\nexport enum AtmState {\n  LOGIN = 'Login',\n  MAIN_MENU = 'Main menu',\n  MY_ACCOUNTS = 'My accounts',\n  NEW_TRANSACTION = 'New transaction',\n  WITHDRAW = 'Withdraw',\n  DEPOSIT = 'Deposit',\n  TRANSACTION_HISTORY = 'Transaction history',\n  CARD_INFO = 'Card info',\n  NEW_ACCOUNT = 'New account',\n  CHOOSE_PLAN = 'Choose your plan',\n  ACCOUNT_INFO = 'Account info',\n  CHANGE_PIN = 'Change pin code'\n}\n\nexport enum CardStatus {\n  BLOCKED = 'BLOCKED',\n  IN_USAGE = 'IN_USAGE',\n  CHEWED = 'CHEWED',\n  OK = 'OK'\n}\n\nexport enum TransactionStatus {\n  COMMITTED = 'COMMITTED',\n  PROCESSING = 'PROCESSING',\n  REJECTED = 'REJECTED',\n  SCHEDULED = 'SCHEDULED'\n}\n\nexport enum TransactionType {\n  TRANSFERRING = 'TRANSFERRING',\n  WITHDRAWAL = 'WITHDRAWAL',\n  DEPOSIT = 'DEPOSIT'\n}\n\nexport enum UserStatus {\n  OK = 'OK',\n  FROZEN = 'FROZEN',\n  BLOCKED = 'BLOCKED',\n  SUSPENDED = 'SUSPENDED'\n}","import { Component, OnInit } from '@angular/core';\nimport { AccountInfo, AtmState, User } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\n\n@Component({\n  selector: 'app-card-info',\n  templateUrl: './card-info.component.html',\n  styleUrls: ['./card-info.component.scss']\n})\nexport class CardInfoComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n  userCard = this.accountService.cardNumber;\n\n  accountInfo?: AccountInfo;\n\n  constructor(\n    private atmHttpService: AtmHttpService,\n    private accountService: AccountService,\n    private navigationService: NavigationService\n  ) { }\n\n  ngOnInit() {\n    this.atmHttpService.getAccountInfo()\n      .subscribe(data => {\n        this.accountInfo = data;\n      });\n  }\n\n  changePinCode() {\n    this.navigationService.goTo(AtmState.CHANGE_PIN);\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n<div class=\"atm-card-info\" *ngIf=\"accountInfo\">\n  <button class=\"atm-user-card\" disabled>\n    <div class=\"name-section\">\n      <!-- {{accountInfo | json}} -->\n      <span>Name:</span>\n      <span>{{accountInfo.card.user.firstName}} {{accountInfo.card.user.middleName ?? ''}} {{accountInfo.card.user.lastName ?? ''}}</span>\n    </div>\n    <div class=\"dob-section\" *ngIf=\"accountInfo.card.user.birthdayDate\">\n      <span>Date of birth:</span>\n      <span>{{accountInfo.card.user.birthdayDate | date: 'mediumDate'}}</span>\n    </div>\n    <div class=\"user-status-section\">\n      <span>User status:</span>\n      <span>{{accountInfo.card.user.userStatus}}</span>\n    </div>\n    <div class=\"card-section\">\n      <span>Card number:</span>\n      <span>{{userCard}}</span>\n    </div>\n    <div class=\"card-status-section\">\n      <span>Card status:</span>\n      <span>{{accountInfo.card.cardStatus}}</span>\n    </div>\n    <div class=\"atm-section\">\n      <span>ATM address:</span>\n      <span>{{accountInfo.atm.address}}</span>\n    </div>\n    <div class=\"bank-section\">\n      <span>Bank:</span>\n      <span>{{accountInfo.card.bank.name}}</span>\n    </div>\n  </button>\n  <div class=\"page-features\">\n    <button (click)=\"changePinCode()\">Change Pin Code</button>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { catchError, EMPTY } from 'rxjs';\nimport { AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-change-pin-code',\n  templateUrl: './change-pin-code.component.html',\n  styleUrls: ['./change-pin-code.component.scss']\n})\nexport class ChangePinCodeComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private fb: FormBuilder,\n    private atmHttpService: AtmHttpService,\n    private notificationService: NotificationService,\n    private navigationService: NavigationService\n  ) { }\n\n  pinCodeForm = this.fb.group({\n    pinCode: new FormControl('', [Validators.required, Validators.maxLength(4), Validators.minLength(4), Validators.pattern(\"^\\\\d{1,4}$\")])\n  })\n\n  httpErrors = {\n    pinCode: ''\n  };\n\n  ngOnInit() {\n  }\n\n  submitForm() {\n    if (this.pinCodeForm.get('pinCode')?.value && this.pinCodeForm.get('pinCode')?.invalid) {\n      this.pinCodeForm.markAllAsTouched();\n      return;\n    }\n\n    this.atmHttpService.changePinCode(this.pinCodeForm.get('pinCode')!.value!)\n      .pipe(\n        catchError(err => {\n          this.httpErrors.pinCode = err.error?.message ?? '';\n          this.pinCodeForm.get('pinCode')?.setErrors({httpError: true}, {emitEvent: true});\n          return EMPTY;\n        })\n      )\n      .subscribe(resp => {\n        this.navigationService.goTo(AtmState.CARD_INFO);\n        this.notificationService.notification$.next('Pin code changed successfully!');\n      })\n  }\n}","<app-atm-header [lastState]=\"ATM_STATES.CARD_INFO\"></app-atm-header>\n<div class=\"change-pin-form\">\n  <div class=\"field-row\" [formGroup]=\"pinCodeForm\">\n    <label for=\"pinCode\"><u>N</u>ew pin code:</label>\n    <input fxFlex=\"60\" id=\"pinCode\" formControlName=\"pinCode\" type=\"password\"/>\n    <div class=\"error-border\" fxLayoutAlign=\"flex-end center\" fxFlex=\"100\" *ngIf=\"pinCodeForm.get('pinCode')?.invalid && pinCodeForm.get('pinCode')?.touched\">\n      <span *ngIf=\"pinCodeForm.get('pinCode').errors?.['minLength'] || pinCodeForm.get('pinCode').errors?.['maxLength']\">\n        Pin code should be 4 characters lenght.\n      </span>\n      <span *ngIf=\"pinCodeForm.get('pinCode').errors?.['required']\">\n        Required.\n      </span>\n      <span *ngIf=\"pinCodeForm.get('pinCode').errors?.['pattern']\">\n        Invalid pin code. Should be 4 digits.\n      </span>\n      <span *ngIf=\"pinCodeForm.get('pinCode').errors?.['httpError']\">\n        {{httpErrors.pinCode}}\n      </span>\n    </div>\n  </div>\n  <div class=\"submit-row\">\n    <button (click)=\"submitForm()\">Change pin code</button>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { catchError, EMPTY } from 'rxjs';\nimport { AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-deposit',\n  templateUrl: './deposit.component.html',\n  styleUrls: ['./deposit.component.scss']\n})\nexport class DepositComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private fb: FormBuilder,\n    private notificationService: NotificationService,\n    private atmHttpService: AtmHttpService,\n    private navigationService: NavigationService\n  ) { }\n\n  httpErrors = {\n    amount: ''\n  }\n\n  amountForm = this.fb.group({\n    amount: new FormControl(0, [Validators.required, Validators.min(1)])\n  });\n\n  ngOnInit() {\n  }\n\n  submitForm() {\n    if (this.amountForm.get('amount')?.invalid || !this.amountForm.get('amount')?.value) {\n      this.amountForm.markAllAsTouched();\n      return;\n    }\n\n    this.atmHttpService.deposit(this.amountForm.get('amount')!.value!)\n      .pipe(catchError(err => {\n        if (err.status === 400) {\n          this.amountForm.get('amount')?.setErrors({httpError: true});\n          this.httpErrors.amount = err.error.message;\n        }\n        return EMPTY;\n      }))\n      .subscribe(() => {\n        this.notificationService.notification$.next('Deposit was successfull!');\n        this.navigationService.goTo(AtmState.MAIN_MENU);\n      })\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n<div class=\"atm-withdraw\">\n  <div class=\"field-row\" [formGroup]=\"amountForm\">\n    <label for=\"amount\"><u>A</u>mount:</label>\n    <input fxFlex=\"60\" id=\"amount\" formControlName=\"amount\" type=\"number\"/>\n    <div class=\"error-border\" fxLayoutAlign=\"flex-end center\" fxFlex=\"100\" *ngIf=\"amountForm.get('amount')?.invalid && amountForm.get('amount')?.touched\">\n      <span *ngIf=\"amountForm.get('amount').errors?.['min']\">\n        Value should be positive.\n      </span>\n      <span *ngIf=\"amountForm.get('amount').errors?.['required']\">\n        Required.\n      </span>\n      <span *ngIf=\"amountForm.get('amount').errors?.['httpError']\">\n        {{httpErrors.amount}}\n      </span>\n    </div>\n  </div>\n  <div class=\"submit-row\">\n    <button (click)=\"submitForm()\">Deposit</button>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\n\n@Component({\n  selector: 'app-my-accounts',\n  templateUrl: './my-accounts.component.html',\n  styleUrls: ['./my-accounts.component.scss']\n})\nexport class MyAccountsComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  accounts$ = this.atmHttpService.getAllAccounts();\n\n  constructor(\n    private atmHttpService: AtmHttpService,\n    public navigationService: NavigationService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"atm-my-accounts\">\n  <app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n  <div class=\"my-accounts-features\">\n    <button (click)=\"navigationService.goTo(ATM_STATES.CHOOSE_PLAN)\">New Account</button>\n  </div>\n  <hr>\n  <div class=\"account-list\">\n    <app-account-list-item fxFlex=\"50\" [account]=\"account\" *ngFor=\"let account of accounts$ | async; let i=index\"></app-account-list-item>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { filter } from 'rxjs';\nimport { AccountType, AtmState, Currencies, SavingPlan, TransactionalPlan } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-new-account',\n  templateUrl: './new-account.component.html',\n  styleUrls: ['./new-account.component.scss']\n})\nexport class NewAccountComponent implements OnInit, OnDestroy {\n\n  transactionalPlan?: TransactionalPlan;\n  savingPlan?: SavingPlan;\n  index: number = -1;\n\n  ATM_STATES = AtmState;\n\n  planForm = this.fb.group({\n    accountName: new FormControl('', [Validators.required, Validators.maxLength(64), Validators.minLength(3)]),\n    currency: new FormControl('', Validators.required),\n  });\n\n  currencyList: Currencies = [];\n\n  constructor(\n    private accountService: AccountService,\n    private fb: FormBuilder,\n    private atmHttpService: AtmHttpService,\n    private navigationService: NavigationService,\n    private notificationService: NotificationService\n  ) { }\n\n  ngOnInit() {\n    this.accountService.newPlan$\n    .pipe(filter(res => !!res))\n    .subscribe(data => {\n\n      if (this.accountService.planType$.value === AccountType.TRANSACTIONAL) {\n        this.transactionalPlan = data?.plan as TransactionalPlan;\n      }\n      else if (this.accountService.planType$.value === AccountType.SAVING) {\n        this.savingPlan = data?.plan as SavingPlan;\n      }\n      this.index = data?.index ?? -1;\n    });\n\n    this.atmHttpService.getCurrency()\n      .subscribe(currency => {\n        this.currencyList = currency;\n        this.planForm.patchValue({currency: this.currencyList[0] ?? ''}, {emitEvent: false});\n      })\n  }\n\n  submitForm() {\n    if (this.planForm.get('accountName')?.invalid ||\n      this.planForm.get('currency')?.invalid) {\n        this.planForm.markAllAsTouched();\n        return;\n    }\n\n    if (this.savingPlan) {\n      this.atmHttpService.createSavingAccount(this.index, this.planForm.get('currency')!.value!, this.planForm.get('accountName')!.value!)\n        .subscribe(() => {\n          this.navigationService.goTo(AtmState.MAIN_MENU);\n          this.notificationService.notification$.next('Saving plan successfully created!')\n        })\n    }\n    else if (this.transactionalPlan) {\n      this.atmHttpService.createTransactionalAccount(this.index, this.planForm.get('currency')!.value!, this.planForm.get('accountName')!.value!)\n        .subscribe(() => {\n          this.navigationService.goTo(AtmState.MAIN_MENU);\n          this.notificationService.notification$.next('Transactional plan successfully created!')\n        })\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.accountService.newPlan$.next(null);\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.CHOOSE_PLAN\"></app-atm-header>\n<div class=\"new-account-create\">\n  <div class=\"transactional-account\" *ngIf=\"transactionalPlan\">\n    <app-account-plan-list-item [disabled]=\"true\" [transactionalPlan]=\"transactionalPlan\"></app-account-plan-list-item>\n  </div>\n  <div class=\"saving-account\" *ngIf=\"savingPlan\">\n    <app-account-plan-list-item [disabled]=\"true\" [savingPlan]=\"savingPlan\"></app-account-plan-list-item>\n  </div>\n  <div class=\"plan-form\" [formGroup]=\"planForm\">\n    <div class=\"field-row\">\n      <label for=\"accountName\"><u>A</u>ccount name:</label>\n      <input fxFlex=\"60\" id=\"accountName\" formControlName=\"accountName\"  [autocomplete]=\"false\" type=\"text\"/>\n      <div class=\"error-border\" fxLayoutAlign=\"flex-end center\" fxFlex=\"100\" *ngIf=\"planForm.get('accountName')?.invalid && planForm.get('accountName')?.touched\">\n        <span *ngIf=\"planForm.get('accountName').errors?.['minlength'] || planForm.get('accountName').errors?.['maxlength']\">\n          Account name lenght should be from 3 to 64 characters characters.\n        </span>\n        <span *ngIf=\"planForm.get('accountName').errors?.['required']\">\n          Required.\n        </span>\n        <span *ngIf=\"planForm.get('accountName').errors?.['httpError']\">\n          An error occured, try again later.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <label for=\"currency\"><u>C</u>urrency</label>\n      <select fxFlex=\"60\" id=\"currency\" formControlName=\"currency\">\n        <option *ngFor=\"let currency of currencyList\">{{currency}}</option>\n      </select>\n    </div>\n    <div class=\"submit-row\">\n      <button (click)=\"submitForm()\">Create account</button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { catchError, EMPTY } from 'rxjs';\nimport { Account, AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-new-transaction',\n  templateUrl: './new-transaction.component.html',\n  styleUrls: ['./new-transaction.component.scss']\n})\nexport class NewTransactionComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  httpError = '';\n\n  accounts: Account[] = [];\n\n  transactionForm = this.fb.group({\n    senderAccountid: new FormControl<number | null>(null, [Validators.required]),\n    amount: new FormControl(0, [Validators.required, Validators.min(1)]),\n    receiverAccountId: new FormControl<number | null>(null, [Validators.required]),\n    sendAt: new FormControl(false),\n    scheduledTime: new FormControl(null, [Validators.required]),\n    isRegular: new FormControl(false),\n    period: new FormControl('', [Validators.required]),\n    inittialRepeats: new FormControl(null),\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private atmHttpService: AtmHttpService,\n    private notificationService: NotificationService,\n    private navigationService: NavigationService\n  ) { }\n\n  ngOnInit() {\n    this.atmHttpService.getAllAccounts()\n      .subscribe(accounts => {\n        this.accounts = accounts;\n        this.transactionForm.patchValue({senderAccountid: accounts[0].id}, {emitEvent: false})\n        this.transactionForm.get('scheduledTime')?.disable()\n        this.transactionForm.get('period')?.disable();\n        this.transactionForm.get('inittialRepeats')?.disable();\n      });\n\n    this.transactionForm.get('sendAt')?.valueChanges\n    .subscribe(event => {\n      if (event)  {\n        this.transactionForm.get('scheduledTime')?.enable();\n      }\n      else {\n        this.transactionForm.get('scheduledTime')?.disable();\n      }\n    });\n\n    this.transactionForm.get('isRegular')?.valueChanges\n    .subscribe(event => {\n      if (event)  {\n        this.transactionForm.get('period')?.enable();\n        this.transactionForm.get('inittialRepeats')?.enable();\n      }\n      else {\n        this.transactionForm.get('period')?.disable();\n        this.transactionForm.get('inittialRepeats')?.disable();\n      }\n    });\n  }\n\n  periodGuide() {\n    this.notificationService.notification$.next('Example format:   P1D - 1 day, P1M2D - 1 month and 2 days, P1Y - 1 year etc.')\n  }\n\n  repeatGuide() {\n    this.notificationService.notification$.next('If smaller than 0, then will send unlimited times.');\n  }\n\n  submitForm() {\n    if (this.transactionForm.invalid) {\n      this.transactionForm.markAllAsTouched();\n      return;\n    }\n\n    if (!this.transactionForm.get('isRegular')?.value && !this.transactionForm.get('sendAt')?.value) {\n      this.sendTransfer();\n    }\n  }\n\n  sendTransfer() {\n    this.atmHttpService.createNewTransferFromTransaction(\n      this.transactionForm.get('amount')!.value!,\n      this.transactionForm.get('senderAccountid')!.value!,\n      this.transactionForm.get('receiverAccountId')!.value!\n    )\n    .pipe(\n      catchError(err => {\n        if (err.status === 404) {\n          this.httpError = 'Receiver account not found';\n        }\n        else {\n          this.httpError = err.error.message;\n        }\n        return EMPTY;\n      })\n    )\n    .subscribe(() => {\n      this.navigationService.goTo(AtmState.MAIN_MENU);\n      this.notificationService.notification$.next('Transfer was sent to process, you can see current status of transfer in Transactions History');\n    })\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n<div class=\"atm-new-transaction\">\n  <div class=\"form-error-border\" *ngIf=\"httpError\">\n    {{httpError}}\n  </div>\n  <div class=\"new-transaction-form\" [formGroup]=\"transactionForm\" *ngIf=\"accounts.length\">\n    <div class=\"field-row\">\n      <label for=\"senderAccountid\"><u>S</u>ender account:</label>\n      <select fxFlex=\"60\" name=\"senderAccountid\" formControlName=\"senderAccountid\" id=\"senderAccountid\">\n        <option *ngFor=\"let account of accounts\" [value]=\"account.id\">{{account.accountName}}</option>\n      </select>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"transactionForm.get('senderAccountid')?.invalid && transactionForm.get('senderAccountid')?.touched\">\n        <span *ngIf=\"transactionForm.get('senderAccountid').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <label for=\"amount\"><u>A</u>mount:</label>\n      <input fxFlex=\"60\" id=\"amount\" formControlName=\"amount\" type=\"number\"/>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"transactionForm.get('amount')?.invalid && transactionForm.get('amount')?.touched\">\n        <span *ngIf=\"transactionForm.get('amount').errors?.['min']\">\n          Value should be greater than 0.\n        </span>\n        <span *ngIf=\"transactionForm.get('amount').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <label for=\"receiverAccountId\"><u>R</u>eceiver account id:</label>\n      <input fxFlex=\"60\" id=\"receiverAccountId\" formControlName=\"receiverAccountId\" type=\"number\"/>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"transactionForm.get('receiverAccountId')?.invalid && transactionForm.get('receiverAccountId')?.touched\">\n        <span *ngIf=\"transactionForm.get('receiverAccountId').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <input fxFlex=\"30\" id=\"sendAt\" formControlName=\"sendAt\" type=\"checkbox\"/>\n      <label for=\"sendAt\">S<u>e</u>nd at:</label>\n      <input fxFlex=\"60\" id=\"scheduledTime\" formControlName=\"scheduledTime\" placeholder=\"\" type=\"datetime-local\"/>\n      <div class=\"error-border\" fxFlex=\"100\" fxLayoutAlign=\"flex-end center\" *ngIf=\"transactionForm.get('scheduledTime')?.invalid && transactionForm.get('scheduledTime')?.touched\">\n        <span *ngIf=\"transactionForm.get('scheduledTime').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <input fxFlex=\"30\" id=\"isRegular\" formControlName=\"isRegular\" type=\"checkbox\"/>\n      <label for=\"isRegular\">Re<u>g</u>ular:</label>\n      <div fxFlex=\"60\" fxLayoutAlign=\"space-between center\">\n        <label for=\"period\" fxLayoutAlign=\"flex-start center\"><img height=\"12px\" (click)=\"periodGuide()\" style=\"aspect-ratio: 1; cursor: pointer;\" src=\"https://img.icons8.com/pixels/512/experimental-info-pix.png\" alt=\"Info\"> <u>P</u>eriod:</label>\n        <input fxFlex=\"60\" id=\"period\" formControlName=\"period\" type=\"text\"/>\n      </div>\n      <div\n        class=\"error-border\"\n        fxFlex=\"100\"\n        fxLayoutAlign=\"flex-end center\"\n        *ngIf=\"(transactionForm.get('period')?.invalid && transactionForm.get('period')?.touched) ||\n          (transactionForm.get('inittialRepeats')?.invalid && transactionForm.get('inittialRepeats')?.touched)\"\n      >\n        <span *ngIf=\"transactionForm.get('period').errors?.['required'] || transactionForm.get('inittialRepeats').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"field-row\">\n      <label></label>\n      <div fxFlex=\"60\" fxLayoutAlign=\"space-between center\">\n        <label for=\"period\"><img height=\"12px\" (click)=\"repeatGuide()\" style=\"aspect-ratio: 1; cursor: pointer;\" src=\"https://img.icons8.com/pixels/512/experimental-info-pix.png\" alt=\"Info\"><u>I</u>nitial repeats:</label>\n        <input fxFlex=\"60\" id=\"inittialRepeats\" formControlName=\"inittialRepeats\" type=\"text\"/>\n      </div>\n      <div\n        class=\"error-border\"\n        fxFlex=\"100\"\n        fxLayoutAlign=\"flex-end center\"\n        *ngIf=\"(transactionForm.get('period')?.invalid && transactionForm.get('period')?.touched) ||\n          (transactionForm.get('inittialRepeats')?.invalid && transactionForm.get('inittialRepeats')?.touched)\"\n      >\n        <span *ngIf=\"transactionForm.get('period').errors?.['required'] || transactionForm.get('inittialRepeats').errors?.['required']\">\n          Required.\n        </span>\n      </div>\n    </div>\n    <div class=\"submit-row\">\n      <button (click)=\"submitForm()\">Submit for processing</button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AtmState, PlansResponse } from 'src/app/interfaces/app.interfaces';\nimport { AccountService } from 'src/app/services/account.service';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\n\n@Component({\n  selector: 'app-select-new-account-type',\n  templateUrl: './select-new-account-type.component.html',\n  styleUrls: ['./select-new-account-type.component.scss']\n})\nexport class SelectNewAccountTypeComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  atmPlans$ = new BehaviorSubject<PlansResponse | null>(null);\n\n  constructor(\n    private atmHttpService: AtmHttpService,\n    private accountService: AccountService\n  ) {}\n\n  ngOnInit() {\n    this.atmHttpService.getPlans()\n      .subscribe(plans => {\n        this.atmPlans$.next(plans);\n      });\n\n      this.accountService.newPlan$.next(null);\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MY_ACCOUNTS\"></app-atm-header>\n<div class=\"plans\" *ngIf=\"atmPlans$ | async\">\n  <div class=\"transactional\">\n    <p>Credit transactional</p>\n    <div class=\"transactional-list\">\n      <app-account-plan-list-item [index]=\"i\" [transactionalPlan]=\"plan\" *ngFor=\"let plan of atmPlans$.value.plans.transactional; let i = index\"></app-account-plan-list-item>\n    </div>\n  </div>\n  <div class=\"saving\">\n    <p>Saving</p>\n    <div class=\"saving-list\">\n      <app-account-plan-list-item [index]=\"i\" [savingPlan]=\"plan\" *ngFor=\"let plan of atmPlans$.value.plans.saving; let i = index\"></app-account-plan-list-item>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AtmState, Transaction } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\n\n@Component({\n  selector: 'app-transactions-history',\n  templateUrl: './transactions-history.component.html',\n  styleUrls: ['./transactions-history.component.scss']\n})\nexport class TransactionsHistoryComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  transactionsHitory?: Transaction[];\n\n  constructor(\n    private atmHttpService: AtmHttpService\n  ) { }\n\n  ngOnInit() {\n    this.atmHttpService.getTransactionsHistory()\n      .subscribe(transactions => {\n        this.transactionsHitory = transactions;\n      })\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n<div class=\"atm-transactions-history\" *ngIf=\"transactionsHitory\">\n  <app-transaction-list-item [transaction]=\"transaction\" *ngFor=\"let transaction of transactionsHitory\"></app-transaction-list-item>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { catchError, EMPTY } from 'rxjs';\nimport { AtmState } from 'src/app/interfaces/app.interfaces';\nimport { AtmHttpService } from 'src/app/services/atm-http.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-withdraw',\n  templateUrl: './withdraw.component.html',\n  styleUrls: ['./withdraw.component.scss']\n})\nexport class WithdrawComponent implements OnInit {\n\n  ATM_STATES = AtmState;\n\n  constructor(\n    private fb: FormBuilder,\n    private notificationService: NotificationService,\n    private atmHttpService: AtmHttpService,\n    private navigationService: NavigationService\n  ) { }\n\n  httpErrors = {\n    amount: ''\n  }\n\n  amountForm = this.fb.group({\n    amount: new FormControl(0, [Validators.required, Validators.min(1)])\n  });\n\n  ngOnInit() {\n  }\n\n  submitForm() {\n    if (this.amountForm.get('amount')?.invalid || !this.amountForm.get('amount')?.value) {\n      this.amountForm.markAllAsTouched();\n      return;\n    }\n\n    this.atmHttpService.withdraw(this.amountForm.get('amount')!.value!)\n      .pipe(catchError(err => {\n        if (err.status === 400) {\n          this.amountForm.get('amount')?.setErrors({httpError: true});\n          this.httpErrors.amount = err.error.message;\n        }\n        return EMPTY;\n      }))\n      .subscribe(() => {\n        this.notificationService.notification$.next('Withdraw was successfull!');\n        this.navigationService.goTo(AtmState.MAIN_MENU);\n      })\n  }\n\n}\n","<app-atm-header [lastState]=\"ATM_STATES.MAIN_MENU\"></app-atm-header>\n<div class=\"atm-withdraw\">\n  <div class=\"field-row\" [formGroup]=\"amountForm\">\n    <label for=\"amount\"><u>A</u>mount:</label>\n    <input fxFlex=\"60\" id=\"amount\" formControlName=\"amount\" type=\"number\"/>\n    <div class=\"error-border\" fxLayoutAlign=\"flex-end center\" fxFlex=\"100\" *ngIf=\"amountForm.get('amount')?.invalid && amountForm.get('amount')?.touched\">\n      <span *ngIf=\"amountForm.get('amount').errors?.['min']\">\n        Value should be positive.\n      </span>\n      <span *ngIf=\"amountForm.get('amount').errors?.['required']\">\n        Required.\n      </span>\n      <span *ngIf=\"amountForm.get('amount').errors?.['httpError']\">\n        {{httpErrors.amount}}\n      </span>\n    </div>\n  </div>\n  <div class=\"submit-row\">\n    <button (click)=\"submitForm()\">Withdraw</button>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, filter, map, share, tap } from 'rxjs';\nimport { AccountType, AtmState, SavingPlan, TransactionalPlan, TransactionType } from '../interfaces/app.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  private _cardNumber: string | null = null;\n\n  set cardNumber(number: string | null) {\n    this._cardNumber = number;\n  }\n\n  get cardNumber(): string | null {\n    return this._cardNumber;\n  }\n\n  atmState$ = new BehaviorSubject<AtmState>(AtmState.LOGIN);\n\n  stateName$ = new BehaviorSubject<string>('');\n\n  newPlan$ = new BehaviorSubject<{plan: SavingPlan | TransactionalPlan, index: number} | null>(null);\n\n  planType$ = new BehaviorSubject<AccountType | null>(null);\n\nconstructor() {\n  this.newPlan$.pipe(filter(plan => !!plan)).subscribe(\n    data => {\n      if (typeof (data?.plan as SavingPlan).additionAllowed == 'undefined') {\n        this.planType$.next(AccountType.TRANSACTIONAL);\n      }\n      else if (typeof (data?.plan as TransactionalPlan).creditMoneyAmount == 'undefined') {\n        this.planType$.next(AccountType.SAVING);\n      }\n    }\n  );\n  this.atmState$.subscribe(\n    state => {\n      if (state == AtmState.NEW_ACCOUNT) {\n        switch (this.planType$.value) {\n          case AccountType.SAVING:\n            this.stateName$.next('Create new saving account');\n            break;\n          case AccountType.TRANSACTIONAL:\n            this.stateName$.next('Create new transactional account');\n            break;\n        }\n        return;\n      }\n      this.stateName$.next(state);\n    }\n  );\n}\n\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom, from, lastValueFrom, Observable, of, tap } from 'rxjs';\nimport { Account, AccountInfo, AtmInfo, AtmStatus, Currencies, PlansResponse, SavingPlan, Transaction } from 'src/app/interfaces/app.interfaces';\nimport { environment } from 'src/environments/environment';\nimport { UtilsService } from './utils.service';\n\n@Injectable()\nexport class AtmHttpService {\n\nconstructor(\n    private http: HttpClient,\n    private utilsService: UtilsService\n) { }\n\n  getAllAtm(): Observable<AtmInfo[]> {\n      const url = `${environment.backApi}/atm/all`;\n\n      return this.http.get<AtmInfo[]>(url);\n  }\n\n  verifyAtm(cardNumber: string, atmId: number): Observable<void> {\n    const url = `${environment.backApi}/card/verify-atm-support-bank`;\n\n    return this.http.post<void>(url, {cardNumber, atmId});\n  }\n\n  loginToAtm(number: string, pin: string, atm: number): Observable<any> {\n    const url = `${environment.appUrl}/login`;\n\n    const headers = new HttpHeaders({'Content-Type': 'application/x-www-form-urlencoded'});\n\n    return this.http.post<void>(url, this.utilsService.toUrlEncoded({number, pin, atm}), {headers});\n  }\n\n  getAllAccounts(): Observable<Account[]> {\n    const url = `${environment.backApi}/account/all-my`;\n\n    return this.http.get<Account[]>(url);\n  }\n\n  getAccountInfo(): Observable<AccountInfo> {\n    const url = `${environment.backApi}/account/auth`;\n\n    return this.http.get<AccountInfo>(url);\n  }\n\n  logoutFromAtm(): Observable<void> {\n    const url = `${environment.appUrl}/logout`;\n\n    return this.http.post<void>(url, {}, {withCredentials: true});\n  }\n\n  getPlans(): Observable<PlansResponse> {\n    return this.http.get<PlansResponse>(`${environment.backApi}/account/plans`)\n  }\n\n  getCurrency(): Observable<Currencies> {\n    return this.http.get<Currencies>(`${environment.backApi}/account/currency`);\n  }\n\n  createSavingAccount(plan: number | string, currencyUnitCode: string, accountName: string): Observable<void> {\n    const url = `${environment.backApi}/account/saving/plan`;\n\n    return this.http.post<void>(url, {plan, currencyUnitCode, accountName});\n  }\n\n  createTransactionalAccount(plan: number | string, currencyUnitCode: string, accountName: string): Observable<void> {\n    const url = `${environment.backApi}/account/transactional/plan`;\n\n    return this.http.post<void>(url, {plan, currencyUnitCode, accountName});\n  }\n\n  withdraw(amount: number): Observable<void> {\n    const url = `${environment.backApi}/transfer/withdraw`;\n\n    return this.http.post<void>(url, {amount});\n  }\n\n  deposit(amount: number): Observable<void> {\n    const url = `${environment.backApi}/transfer/deposit`;\n\n    return this.http.post<void>(url, {amount});\n  }\n\n  getTransactionsHistory(): Observable<Transaction[]> {\n    const url = `${environment.backApi}/transaction/history`;\n\n    return this.http.get<Transaction[]>(url);\n  }\n\n  changePinCode(pin: string): Observable<void> {\n    const url = `${environment.backApi}/card/update-pin`;\n\n    return this.http.put<void>(url, {pin});\n  }\n\n  createNewTransferFromTransaction(amount: number, senderAccountId: number, receiverAccountId: number): Observable<void> {\n    const url = `${environment.backApi}/transfer`;\n\n    return this.http.put<void>(url, {amount, senderAccountId, receiverAccountId});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AtmState } from '../interfaces/app.interfaces';\nimport { AccountService } from './account.service';\nimport { AtmHttpService } from './atm-http.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n\nconstructor(\n  private accountService: AccountService,\n  private atmHttpService: AtmHttpService\n) { }\n\ngoTo(state: AtmState) {\n  if (state === AtmState.LOGIN) {\n    this.atmHttpService.logoutFromAtm()\n    .subscribe(() => {});\n  }\n  this.accountService.atmState$.next(state);\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  notification$ = new BehaviorSubject<string>('');\n\nconstructor() { }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class UtilsService {\n\nconstructor() { }\n\n    toUrlEncoded(obj: Record<string, string | number | boolean>): string {\n        let str = [];\n        for(var p in obj)\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n        return str.join(\"&\");\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  get appUrl(): string {\n    return 'http://localhost:8080';\n    // return 'https://4a54-212-90-62-127.eu.ngrok.io';\n  },\n  get backApi(): string {\n    return `${this.appUrl}/api`\n  },\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["map","AccountType","AtmState","i0","AtmHeaderComponent","constructor","accountService","navigationService","atmState$","stateName$","currentState$","pipe","state","ATM_STATES","NEW_ACCOUNT","planType$","value","SAVING","TRANSACTIONAL","ngOnInit","selectors","inputs","lastState","decls","vars","consts","template","ctx","EventEmitter","BehaviorSubject","AtmStatus","AtmListComponent","IDLE","selectItem","index","selectedIndex","next","onAtmSelect","emit","atmList","outputs","FormBuilder","FormControl","Validators","catchError","EMPTY","AtmLoginComponent","fb","atmHttpService","group","cardNumber","required","maxLength","minLength","pinCode","pattern","loginForm","disable","selectedAtm$","subscribe","atm","enable","reset","patchValue","isVerified$","get","valueChanges","val","setValue","replace","emitEvent","submitAction","invalid","id","markAllAsTouched","verifyAtm","err","setErrors","httpError","httpErrors","error","message","loginToAtm","afterLogin","AtmWindowComponent","notificationService","notification$","getAllAtm","atmList$","MAIN_MENU","NotificationComponent","closeWindow","notifications$","MyAccountsComponent","getAllAccounts","plan_r3","plan_r5","SelectNewAccountTypeComponent","getPlans","plans","atmPlans$","newPlan$"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}